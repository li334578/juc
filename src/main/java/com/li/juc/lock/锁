锁的理解
1.公平锁、非公平锁
公平锁：非常公平，不允许插队
非公平锁： 允许插队 常用。默认都是非公平
```java
// 非公平锁 默认
public ReentrantLock() {
        sync = new NonfairSync();
    }
```

```java
// 公平锁
public ReentrantLock(boolean fair) {
        sync = fair ? new FairSync() : new NonfairSync();
    }
```

2.可重入锁(递归锁)
拿到了外面的锁就可以拿到里面的锁 自动获得

3.自旋锁


死锁

产生死锁的四个必要条件：
（1） 互斥条件：一个资源每次只能被一个进程使用。
（2） 占有且等待：一个进程因请求资源而阻塞时，对已获得的资源保持不放。
（3）不可强行占有:进程已获得的资源，在末使用完之前，不能强行剥夺。
（4） 循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。

两个线程互相抢夺资源

怎么排除死锁

使用jps 定位进程号
jps -l
jstack 进程号

面试或者工作中排查问题

日志
堆栈信息
